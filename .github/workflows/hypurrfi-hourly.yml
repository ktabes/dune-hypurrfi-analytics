name: HypurrFi TVL & Revenue → CSV (hourly)

on:
  schedule:
    - cron: "59 * * * *"   # every hour at :59 (UTC)
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: hypurrfi-hourly
  cancel-in-progress: false

jobs:
  hourly:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # --- Run both ETLs (these write daily CSVs and append hourly CSVs) ---
      - name: Run TVL ETL
        run: python3 ./src/fetch_hypurrfi_tvl.py

      - name: Run Revenue ETL
        run: python3 ./src/fetch_hypurrfi_revenue.py

      # --- Commit only hourly CSV changes (keeps git noise low) ---
      - name: Commit hourly CSV changes (if any)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add data/*hourly.csv data/*debug*.json || true
          if git diff --cached --quiet; then
            echo "No hourly CSV changes"
          else
            git commit -m "chore(data): update HypurrFi hourly CSVs"
            git push
          fi

      # =========================
      # Dune uploads (hourly)
      # =========================

      # --- Upload helper: TVL hourly ---
      - name: Upload TVL hourly to Dune
        if: always()
        env:
          DUNE_API_KEY: ${{ secrets.DUNE_API_KEY }}
          CSV_PATH: data/hypurrfi_tvl_hourly.csv
          TABLE_NAME: hypurrfi_tvl_hourly
          DESCRIPTION: HypurrFi TVL (hourly, as observed; top-of-hour UTC)
        run: |
          python3 - << 'PY'
          import json, os, pathlib, sys
          p = pathlib.Path(os.environ["CSV_PATH"])
          if not p.exists(): sys.exit(f"❌ Missing {p}")
          content = p.read_text(encoding="utf-8").strip()
          payload = {
            "data": content,
            "description": os.environ.get("DESCRIPTION",""),
            "table_name": os.environ["TABLE_NAME"],
            "is_private": False
          }
          pathlib.Path("payload.json").write_text(json.dumps(payload), encoding="utf-8")
          PY
          curl -sS -X POST \
            -H "Content-Type: application/json" \
            -H "X-Dune-Api-Key: $DUNE_API_KEY" \
            --data @payload.json \
            https://api.dune.com/api/v1/table/upload/csv \
            | tee dune_response.json
          python3 - << 'PY'
          import json, sys, pathlib
          r = json.loads(pathlib.Path("dune_response.json").read_text() or "{}")
          print("Dune response:", r)
          if not r.get("success", False):
              sys.exit("❌ Dune upload failed")
          PY

      # --- Upload helper: Revenue hourly ---
      - name: Upload Revenue hourly to Dune
        if: always()
        env:
          DUNE_API_KEY: ${{ secrets.DUNE_API_KEY }}
          CSV_PATH: data/hypurrfi_revenue_hourly.csv
          TABLE_NAME: hypurrfi_daily_revenue_hl1_hourly
          DESCRIPTION: HypurrFi protocol revenue (USD, hourly as observed; top-of-hour UTC)
        run: |
          python3 - << 'PY'
          import json, os, pathlib, sys
          p = pathlib.Path(os.environ["CSV_PATH"])
          if not p.exists(): sys.exit(f"❌ Missing {p}")
          content = p.read_text(encoding="utf-8").strip()
          payload = {
            "data": content,
            "description": os.environ.get("DESCRIPTION",""),
            "table_name": os.environ["TABLE_NAME"],
            "is_private": False
          }
          pathlib.Path("payload.json").write_text(json.dumps(payload), encoding="utf-8")
          PY
          curl -sS -X POST \
            -H "Content-Type: application/json" \
            -H "X-Dune-Api-Key: $DUNE_API_KEY" \
            --data @payload.json \
            https://api.dune.com/api/v1/table/upload/csv \
            | tee dune_response.json
          python3 - << 'PY'
          import json, sys, pathlib
          r = json.loads(pathlib.Path("dune_response.json").read_text() or "{}")
          print("Dune response:", r)
          if not r.get("success", False):
            sys.exit("❌ Dune upload failed")
          PY

      # =========================
      # Dune uploads (daily snapshots) — optional but handy
      # =========================

      # --- Upload helper: TVL daily (one row per date; includes today's partial) ---
      - name: Upload TVL daily to Dune
        if: always()
        env:
          DUNE_API_KEY: ${{ secrets.DUNE_API_KEY }}
          CSV_PATH: data/hypurrfi_tvl.csv
          TABLE_NAME: hypurrfi_tvl_daily
          DESCRIPTION: HypurrFi TVL (daily; includes today's partial)
        run: |
          python3 - << 'PY'
          import json, os, pathlib, sys
          p = pathlib.Path(os.environ["CSV_PATH"])
          if not p.exists(): sys.exit(f"❌ Missing {p}")
          content = p.read_text(encoding="utf-8").strip()
          payload = {
            "data": content,
            "description": os.environ.get("DESCRIPTION",""),
            "table_name": os.environ["TABLE_NAME"],
            "is_private": False
          }
          pathlib.Path("payload.json").write_text(json.dumps(payload), encoding="utf-8")
          PY
          curl -sS -X POST \
            -H "Content-Type: application/json" \
            -H "X-Dune-Api-Key: $DUNE_API_KEY" \
            --data @payload.json \
            https://api.dune.com/api/v1/table/upload/csv \
            | tee dune_response.json
          python3 - << 'PY'
          import json, sys, pathlib
          r = json.loads(pathlib.Path("dune_response.json").read_text() or "{}")
          print("Dune response:", r)
          if not r.get("success", False):
            sys.exit("❌ Dune upload failed")
          PY

      # --- Upload helper: Revenue daily (one row per date; includes today's partial) ---
      - name: Upload Revenue daily to Dune
        if: always()
        env:
          DUNE_API_KEY: ${{ secrets.DUNE_API_KEY }}
          CSV_PATH: data/hypurrfi_revenue.csv
          TABLE_NAME: hypurrfi_daily_revenue_hl1
          DESCRIPTION: HypurrFi protocol revenue (USD, daily; includes today's partial)
        run: |
          python3 - << 'PY'
          import json, os, pathlib, sys
          p = pathlib.Path(os.environ["CSV_PATH"])
          if not p.exists(): sys.exit(f"❌ Missing {p}")
          content = p.read_text(encoding="utf-8").strip()
          payload = {
            "data": content,
            "description": os.environ.get("DESCRIPTION",""),
            "table_name": os.environ["TABLE_NAME"],
            "is_private": False
          }
          pathlib.Path("payload.json").write_text(json.dumps(payload), encoding="utf-8")
          PY
          curl -sS -X POST \
            -H "Content-Type: application/json" \
            -H "X-Dune-Api-Key: $DUNE_API_KEY" \
            --data @payload.json \
            https://api.dune.com/api/v1/table/upload/csv \
            | tee dune_response.json
          python3 - << 'PY'
          import json, sys, pathlib
          r = json.loads(pathlib.Path("dune_response.json").read_text() or "{}")
          print("Dune response:", r)
          if not r.get("success", False):
            sys.exit("❌ Dune upload failed")
          PY